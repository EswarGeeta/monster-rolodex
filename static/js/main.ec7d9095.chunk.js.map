{"version":3,"sources":["components/ card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","name","id","email","imageLink","className","src","alt","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","e","target","value","App","state","searchValue","handleSearch","bind","fetch","then","response","json","users","setState","console","log","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAGaA,G,kBAAO,SAAAC,GAAU,IAAD,EACGA,EAAMC,QAA1BC,EADiB,EACjBA,KAAMC,EADW,EACXA,GAAIC,EADO,EACPA,MACZC,EAAS,+BAA2BF,EAA3B,aACf,OAAO,yBAAKG,UAAU,kBAClB,yBAAKC,IAAKF,EAAWG,IAAI,YACzB,4BAAKN,GACL,2BAAIE,MCLCK,EAAW,SAAAT,GACpB,OAAO,yBAAKM,UAAU,aACjBN,EAAMU,SAASC,IAAI,SAAAV,GAAO,OAAI,kBAAC,EAAD,CAAMW,IAAKX,EAAQE,GAAIF,QAASA,QCH1DY,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOT,UAAU,SAASU,KAAK,SAASF,YAAaA,EAAaG,SAAU,SAAAC,GAAC,OAAIH,EAAaG,EAAEC,OAAOC,YCmC5FC,E,YAjCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXZ,SAAU,GACVa,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANR,E,iFASO,IAAD,OAClBC,MAAM,6CAA6CC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAErB,SAAUoB,Q,2CAI7HE,QAAQC,IAAI,uB,mCAGDb,GAAO,IAAD,OACjBc,KAAKH,SAAS,CAACR,YAAaH,GAAQ,kBAAMY,QAAQC,IAAI,EAAKX,MAAMC,iB,+BAGzD,IAAD,EAC2BW,KAAKZ,MAA/BZ,EADD,EACCA,SAAUa,EADX,EACWA,YACZY,EAAmBzB,EAAS0B,OAAO,SAAAnC,GAAO,OAAIA,EAAQC,KAAKmC,cAAcC,SAASf,EAAYgB,uBACpG,OACE,yBAAKjC,UAAU,OACX,kBAAC,EAAD,CAAWQ,YAAY,kBAAkBC,aAAcmB,KAAKV,eAC9D,kBAAC,EAAD,CAAUd,SAAUyB,S,GA5BVK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.ec7d9095.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => {\n    const { name, id, email } = props.monster;\n    const imageLink = `https://robohash.org/${id}?set=set2`;\n    return <div className=\"card-container\"> \n        <img src={imageLink} alt=\"monster\"></img>\n        <h2>{name}</h2>\n        <p>{email}</p>\n    </div>\n}","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../ card/card.component'\n\nexport const CardList = props => {\n    return <div className=\"card-list\">\n        {props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n    </div>;\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={e => handleChange(e.target.value)}></input>\n);","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchValue: '',\n    }\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n  \n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({ monsters: users}));\n  }\n\n  componentDidUpdate() {\n    console.log('component updated');\n  }\n\n  handleSearch(value){\n    this.setState({searchValue: value}, () => console.log(this.state.searchValue));\n  }\n\n  render() {\n    const { monsters, searchValue } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchValue.toLocaleLowerCase()));\n    return (\n      <div className=\"App\">\n          <SearchBox placeholder='search monsters' handleChange={this.handleSearch} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}